<?php

namespace Globalcom\DoormanBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * KeyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KeyRepository extends EntityRepository
{
    public function getQbAllNotInKeygroup(KeyGroup $keyGroup)
    {
        $qb = $this->createQueryBuilder('k');
        if ($keyGroup->getKeys()->count()) {
            $qb
                ->andWhere($qb->expr()->notIn('k', ':keys'))
                ->setParameter('keys', $keyGroup->getKeys()->toArray())
            ;
        }

        return $qb;
    }

    public function findAllNotInKeygroup(KeyGroup $keyGroup)
    {
        $qb = $this->getQbAllNotInKeygroup($keyGroup);

        return $qb->getQuery()->getResult();
    }

    public function getQbAllInKeygroup(KeyGroup $keyGroup)
    {
        $qb = $this->createQueryBuilder('k');
        $qb
            ->innerJoin('k.keyGroups', 'kg', Join::WITH, 'kg = :keyGroup')
            ->setParameter('keyGroup', $keyGroup)
        ;

        return $qb;
    }

    public function getQbAllInEntrance(Entrance $entrance)
    {
        $qb = $this->createQueryBuilder('k');
        $qb
            ->innerJoin('k.entrances', 'e', Join::WITH, 'e = :entrance')
            ->setParameter('entrance', $entrance)
        ;

        if ($entrance->getKeyGroups()->count()) {

            $keysInGroupsIds = array();
            foreach ($entrance->getKeyGroups() as $keyGroup) { /** @var $keyGroup KeyGroup */
                $keysInGroupsIds = array_merge(
                    $keysInGroupsIds,
                    $keyGroup
                        ->getKeys()
                        ->map(
                            function(Key $key)
                            {
                                return $key->getId();
                            }
                        )
                        ->toArray()
                );
            }

            if (count($keysInGroupsIds)) {
                $qb->orWhere($qb->expr()->in('k.id', $keysInGroupsIds));
            }
        }

        return $qb;
    }

    public function getQbAllNotInEntrance(Entrance $entrance)
    {
        $qb = $this->createQueryBuilder('k');
        if ($entrance->getKeys()->count()) {
            $qb
                ->andWhere($qb->expr()->notIn('k', ':keys'))
                ->setParameter('keys', $entrance->getKeys()->toArray())
            ;
        }

        return $qb;
    }

    public function findAllNotInEntrance(Entrance $entrance)
    {
        $qb = $this->getQbAllNotInEntrance($entrance);

        return $qb->getQuery()->getResult();
    }
}
